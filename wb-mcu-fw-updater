#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

# -*- coding: utf-8 -*-

import argcomplete
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter


cmd_map = {
    'update-fw': None,
    'update-bl': None,
    'recover': None,
    'recover-all': None,
    'update-all': None
}


def init_parser():
    main_parser = ArgumentParser(prog='wb-mcu-fw-updater', formatter_class=ArgumentDefaultsHelpFormatter,
                                          description='Wiren Board modbus devices firmware/bootloader update tool.', add_help=True)
    main_parser.add_argument('--debug', dest='user_loglevel', default=None, action='store_const',
                             const=10, help='Setting the least loglevel. (Default: %(default)s)')
    subparsers = main_parser.add_subparsers(
        title='Actions', dest='cmd', help='Choose mode:\n')

    """
    Updating firmware on single working device.
    """
    update_fw_parser = subparsers.add_parser(
        'update-fw', help='Update firmware on single working device.')
    update_fw_parser.add_argument('--branch', type=str, dest='branch_name', metavar='<branch_name>', default='',
                                  help='Install firmware from specified branch. (Default: %(default)s)')
    update_fw_parser.add_argument('--version', type=str, dest='specified_version', metavar='<fw_version>',
                                  default='latest', help='Download a specified firmware version. (Default: %(default)s)')
    update_fw_parser.add_argument('--restore-defaults', action='store_true', dest='erase_settings',
                                  default=False, help="Erase all device's settings during update. (Default: %(default)s)")
    update_fw_parser.add_argument('-f', '--force', action='store_true', dest='force', default=False,
                                  help='Perform force device reflash, even if firmware is latest. (Default: %(default)s)')
    update_fw_parser.add_argument(
        '-a', '--slaveid', type=int, dest='slaveid', metavar='<slaveid>', required=True, help='Slave address of the device.')
    update_fw_parser.add_argument(
        "port", type=str, metavar='<port>', help='Serial port, device connected to.')

    """
    Updating bootloader on single working device.
    """
    update_bootloader_parser = subparsers.add_parser(
        'update-bl', help='Update bootloader on single working device.')
    update_bootloader_parser.add_argument('-f', '--force', action='store_true', dest='force', default=False,
                                          help='Perform force device reflash, even if firmware is latest. (Default: %(default)s)')
    update_bootloader_parser.add_argument(
        '-a', '--slaveid', type=int, metavar='<slaveid>', dest='slaveid', required=True, help='Slave address of the device.')
    update_bootloader_parser.add_argument(
        "port", type=str, metavar='<port>', help='Serial port, device connected to.')

    """
    Flash single device, stuck in the bootloader.
    """
    recover_fw_parser = subparsers.add_parser(
        'recover', help="Restore the latest firmware on stuck in bootloader device.")
    recover_fw_parser.add_argument('--fw-sig', dest='known_signature', type=str, metavar='<fw_signature>', default=None,
                                   help="Force specify device's firmware signature. (Default: %(default)s)")
    recover_fw_parser.add_argument('--restore-defaults', action='store_true', dest='erase_settings',
                                   default=False, help="Erase all device's settings during flashing. (Default: %(default)s)")
    recover_fw_parser.add_argument(
        '-a', '--slaveid', type=int, dest='slaveid', metavar='<slaveid>', required=True, help='Slave address of the device.')
    recover_fw_parser.add_argument(
        "port", type=str, metavar='<port>', help='Serial port, device connected to.')

    """
    Update firmware on all devices, found in wb-mqtt-serial config.
    """
    update_all_fw_parser = subparsers.add_parser(
        'update-all', help="Trying to update firmwares on all devices, added to wb-mqtt-serial's config.")
    update_all_fw_parser.add_argument('-f', '--force', action='store_true', dest='force', default=False,
                                      help='Perform force updates of all devices, even if firmwares are latest. (Default: %(default)s)')

    recover_all_parser = subparsers.add_parser(
        'recover-all', help="Trying to recover all devices, added to wb-mqtt-serial's config.")

    return main_parser


if __name__ == "__main__":
    main_parser = init_parser()
    argcomplete.autocomplete(argument_parser=main_parser, always_complete_options='long')

    import atexit
    from wb_mcu_fw_updater import update_monitor, user_log, CONFIG

    cmd_map.update({
        'update-all' : update_monitor.update_all,
        'update-fw' : update_monitor.update_fw,
        'update-bl' : update_monitor.update_bootloader,
        'recover' : update_monitor.recover_fw,
        'recover-all' : update_monitor.recover_all
    })

    args = main_parser.parse_args()
    if args.cmd in cmd_map:
        func = cmd_map[args.cmd]
    else:
        main_parser.error('Choose action from: %s' % ', '.join(cmd_map.keys()))

    user_log.setup_syslog_logger()
    user_log.setup_user_logger((args.user_loglevel or CONFIG['USER_LOGLEVEL']))

    update_monitor.pause_driver()
    atexit.register(update_monitor.resume_driver)
    atexit.register(update_monitor.db.dump)

    if 'port' in vars(args):
        initial_port_settings = update_monitor.get_port_settings(args.port)
        atexit.register(lambda: update_monitor.set_port_settings(args.port, initial_port_settings))

    func(args)
