#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import logging
import subprocess
import sys
from wb_mcu_fw_updater import update_monitor, user_log, die, CONFIG


def update_alive_device(updater, args):
    """
    Updating device, working in normal mode. Port name is compulsory.
    """
    erase_all_settings = False
    if 'erase_settings' in vars(args):
        erase_all_settings = args.erase_settings
    modbus_connection = updater.get_modbus_device_connection(args.slaveid)
    if updater.update_is_needed(modbus_connection) or args.force:
        fw_signature = modbus_connection.get_fw_signature()
        download_fpath = updater.download(fw_signature, args.specified_version, args.fname)
        modbus_connection.reboot_to_bootloader()
        updater.flash(modbus_connection.slaveid, download_fpath, erase_all_settings)  # Slaveid is internal modbus_connection's one!


def reflash_in_bootloader(updater, args):
    """
    Flashing device, stuck in bootloader. Actual slaveid and fw signature are required.
    """
    if not args.known_signature:
        fw_signature = updater.get_fw_signature_by_model(args.device_model)
    else:
        fw_signature = args.known_signature
    download_fpath = updater.download(fw_signature, args.specified_version, args.fname)
    if args.slaveid != 0:
        slaveid = args.slaveid
    else:
        slaveid = updater.find_slaveid_in_bootloader()  # Erasing all settings!
    updater.flash(slaveid, download_fpath)


def update_all(updater, args):
    """
    Parsing driver_config for a list of slaveids. Trying to update each device.
    """
    failed_devices = []
    subprocess.call('service %s stop' % CONFIG['DRIVER_EXEC_NAME'], shell=True)
    for device_name, device_slaveid in updater.get_devices_on_port(args.driver_config):
        args.slaveid = device_slaveid
        logging.info('Trying to update %s with slaveid %d:' % (device_name, args.slaveid))
        try:
            update_alive_device(updater, args)
        except Exception as e:
            logging.error('Update for %s : %d failed!' % (device_name, args.slaveid), exc_info=True)
            failed_devices.append([device_name, args.slaveid])
    subprocess.call('service %s restart' % CONFIG['DRIVER_EXEC_NAME'], shell=True)
    if failed_devices:
        die('Update has failed for:\n%s\nCheck syslog for more info' % (str(failed_devices)))


def parse_args():
    main_parser = argparse.ArgumentParser(prog='wb-mcu-fw-updater', formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='WirenBoard modbus devices firmware update tool')
    main_parser.add_argument("port", type=str, help='Serial port, device connected to.')
    main_parser.add_argument('-a', '--slaveid', type=int, dest='slaveid', default=0, help='Slave address of the device.')
    main_parser.add_argument('--save-to', type=str, dest='fname', default=None, help='Filepath, where to download the firmware.')
    main_parser.add_argument('--debug', dest='user_loglevel', default=None, action='store_const', const=10, help='Displaying all log records.')
    main_parser.add_argument('--version', type=str, dest='specified_version', default='latest', help='Download a specified firmware version.')
    main_parser.add_argument('--branch', type=str, dest='branch_name', default='', help='Install firmware from specified branch.')
    main_parser.add_argument('--mode', type=str, dest='mode', default='fw', choices=('fw', 'bootloader'), help='Update firmware or bootloader.')
    subparsers = main_parser.add_subparsers()

    update_parser = subparsers.add_parser('update', help='Update firmware on single working device.')
    update_parser.add_argument('--restore-defaults', action='store_true', dest='erase_settings', default=False, help="Erase all device's settings during update.")
    update_parser.add_argument('--force', action='store_true', dest='force', default=False, help='Perform force device reflash, even if firmware is latest.')
    update_parser.set_defaults(func=update_alive_device)

    recover_parser = subparsers.add_parser('recover', help="Flash single device, stuck in bootloader to it's latest firmware. Device model name (or known firmware signature) is required!")
    recover_parser.add_argument('--model-name', type=str, dest='device_model', required=True, help='Getting firmware signature by model name.')
    recover_parser.add_argument('--signature', type=str, dest='known_signature', default=None, help="Force specify device's firmware signature.")
    recover_parser.set_defaults(func=reflash_in_bootloader)

    update_all_parser = subparsers.add_parser('update-all', help="Trying to update all devices, added to wb-mqtt-serial's config.")
    update_all_parser.add_argument('--config', type=str, dest='driver_config', default='/etc/wb-mqtt-serial.conf', help="Specify driver's config filepath.")
    update_all_parser.add_argument('--force', action='store_true', dest='force', default=False, help='Perform force device update, even if firmware is latest.')
    update_all_parser.set_defaults(func=update_all)

    return main_parser.parse_args()


if __name__ == "__main__":
    args = parse_args()

    user_log.setup_syslog_logger()
    user_log.setup_user_logger((args.user_loglevel or CONFIG['USER_LOGLEVEL']))

    updater = update_monitor.UpdateHandler(args.port, args.mode, args.branch_name)
    args.func(updater, args)
